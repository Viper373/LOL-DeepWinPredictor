name: Always Release

on:
  push:
    branches:
      - main

jobs:
  always-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --list 'v*' --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            echo "tag=v1.0" >> $GITHUB_OUTPUT
          else
            IFS='.' read -r major minor <<<"${latest_tag#v}"
            if [[ -z "$minor" ]]; then
              minor=0
            fi
            if (( minor < 9 )); then
              minor=$((minor+1))
              echo "tag=v$major.$minor" >> $GITHUB_OUTPUT
            else
              major=$((major+1))
              minor=0
              echo "tag=v$major.$minor" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Collect git diff
        id: diff
        run: |
          git log -1 --pretty=format:"%s%n%n%b" > commit_msg.txt
          git diff HEAD^ HEAD > diff.txt
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          cat commit_msg.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "diff_content<<EOF" >> $GITHUB_OUTPUT
          cat diff.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate release notes with LLM (primary)
        id: llm1
        run: |
          set -e
          payload=$(jq -n \
            --arg msg "请用简洁中文总结以下代码变更内容，适合用作 GitHub Release 发布日志：\n\n$COMMIT_MSG\n\n变更详情：\n$DIFF_CONTENT" \
            '{model:"gpt-4o-mini",messages:[{"role":"system","content":"You are a helpful assistant."},{"role":"user","content":$msg}]}'
          )
          response=$(curl -sS -X POST "https://api.chatanywhere.tech/v1/chat/completions" \
            -H "Authorization: Bearer sk-aKcwXkHYsIKmQ7ZZuaiItE2iw498L7OX8krxkXI5CZ6Q6r44" \
            -H "Content-Type: application/json" \
            -d "$payload")
          echo "$response" > llm1.json
          note=$(jq -r '.choices[0].message.content // empty' llm1.json)
          if [ -z "$note" ]; then
            echo "llm1_failed=true" >> $GITHUB_OUTPUT
          else
            echo "release_note<<EOF" >> $GITHUB_OUTPUT
            echo "$note" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "llm1_failed=false" >> $GITHUB_OUTPUT
          fi
        env:
          COMMIT_MSG: ${{ steps.diff.outputs.commit_message }}
          DIFF_CONTENT: ${{ steps.diff.outputs.diff_content }}

      - name: Generate release notes with LLM (fallback)
        if: steps.llm1.outputs.llm1_failed == 'true'
        id: llm2
        run: |
          set -e
          payload=$(jq -n \
            --arg msg "请用简洁中文总结以下代码变更内容，适合用作 GitHub Release 发布日志：\n\n$COMMIT_MSG\n\n变更详情：\n$DIFF_CONTENT" \
            '{model:"free:Qwen3-30B-A3B",messages:[{"role":"user","content":$msg}]}'
          )
          response=$(curl -sS -X POST "https://api.suanli.cn/v1/chat/completions" \
            -H "Authorization: Bearer sk-W0rpStc95T7JVYVwDYc29IyirjtpPPby6SozFMQr17m8KWeo" \
            -H "Content-Type: application/json" \
            -d "$payload")
          echo "$response" > llm2.json
          note=$(jq -r '.choices[0].message.content // empty' llm2.json)
          if [ -z "$note" ]; then
            note="自动生成发布日志失败，请手动补充。"
          fi
          echo "release_note<<EOF" >> $GITHUB_OUTPUT
          echo "$note" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          COMMIT_MSG: ${{ steps.diff.outputs.commit_message }}
          DIFF_CONTENT: ${{ steps.diff.outputs.diff_content }}

      - name: Create tag and release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.get_tag.outputs.tag }}
          git push origin ${{ steps.get_tag.outputs.tag }}
          if [ "${{ steps.llm1.outputs.llm1_failed }}" = "true" ]; then
            note="${{ steps.llm2.outputs.release_note }}"
          else
            note="${{ steps.llm1.outputs.release_note }}"
          fi
          gh release create ${{ steps.get_tag.outputs.tag }} --notes "$note" --title "${{ steps.get_tag.outputs.tag }}"
